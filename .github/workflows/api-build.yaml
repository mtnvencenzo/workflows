name: Dotnet Api Build
# description: |
#     This workflow builds dotnet api applications. It installs dependencies, runs tests, builds the application and uploads the build artifact.
#     This workflow is designed to be reusable and can be called from other workflows.
on:
  workflow_call:
    inputs:
      artifact_name:
        description: "The name of the artifact to upload"
        required: true
        type: string
        default: "dotnet-build-artifact"

      working_directory:
        description: ""
        required: true
        type: string
        
      setup_files:
        required: false
        type: string

      dotnet_version:
        description: "The dotnet version to use"
        type: string
        required: false
        default: "9.x"

      nuget_file_path:
        description: "Path to the NuGet.Config file"
        required: true
        type: string
        default: "./Nuget.config"

      azure_nuget_feed_source:
        description: "The NuGet feed URL"
        required: false
        default: ""
        type: string

      azure_nuget_feed_name:
        description: "The name of the NuGet feed"
        required: false
        default: ""
        type: string

      github_nuget_feed_source:
        description: "The NuGet feed URL"
        required: false
        default: ""
        type: string

      github_nuget_feed_name:
        description: "The name of the NuGet feed"
        required: false
        default: ""
        type: string

      project_path:
        required: true
        type: string

      test_project_path:
        required: true
        type: string

      publish_project_path:
        required: true
        type: string

      publish_directory_name:
        description: "The name of the publish directory"
        required: false
        type: string
        default: "dist"

      version:
        description: "The version of the application"
        required: false
        type: string
        default: "1.0.0"

    secrets:
      azure_artifacts_base64_pat_token:
        description: "The base64 encoded PAT token for Azure Artifacts"
        required: false

      github_packages_pat_token:
        description: "The PAT token for github packages"
        required: false

  workflow_dispatch:

jobs:
  build:
    name: Build and test app
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Auth Azure NuGet
        if: ${{ inputs.azure_nuget_feed_source != '' }}
        working-directory: ${{ inputs.working_directory }}
        run: |
          base64_decoded=$(echo "${{ secrets.azure_artifacts_base64_pat_token }}" | base64 --decode)
          dotnet nuget remove source ${{ inputs.azure_nuget_feed_name }} --configfile ${{ inputs.nuget_file_path }}
          dotnet nuget add source ${{ inputs.azure_nuget_feed_source }} \
            --name ${{ inputs.azure_nuget_feed_name }} \
            --username az \
            --password $base64_decoded \
            --configfile ${{ inputs.nuget_file_path }} \
            --store-password-in-clear-text

      - name: Auth Github NuGet
        if: ${{ inputs.github_nuget_feed_source != '' }}
        working-directory: ${{ inputs.working_directory }}
        run: |
          dotnet nuget remove source ${{ inputs.github_nuget_feed_name }} --configfile ${{ inputs.nuget_file_path }}
          dotnet nuget add source ${{ inputs.github_nuget_feed_source }} \
            --name ${{ inputs.github_nuget_feed_name }} \
            --username gh \
            --password ${{ secrets.github_packages_pat_token }} \
            --configfile ${{ inputs.nuget_file_path }} \
            --store-password-in-clear-text

      - name: Install dependencies
        working-directory: ${{ inputs.working_directory }}
        run: dotnet restore ${{ inputs.project_path }} --configfile "${{ inputs.nuget_file_path }}"

      - name: Build
        working-directory: ${{ inputs.working_directory }}
        run: dotnet build ${{ inputs.project_path }} --no-restore --configuration Release -p:Version=${{ inputs.version }}

      - name: Test
        working-directory: ${{ inputs.working_directory }}
        run: |
          dotnet test ${{ inputs.test_project_path }} \
            --no-build \
            --no-restore \
            --configuration Release \
            --collect:"XPlat Code Coverage" -v:q -l:"trx;verbosity=normal" \
            --results-directory "test_results"

      - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.18
        with:
          reports: "**/*.cobertura.xml" # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
          targetdir: "${{ github.workspace }}" # REQUIRED # The directory where the generated report should be saved.
          reporttypes: "Cobertura" # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
          verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
          title: "Code Coverage" # Optional title.
          tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
          customSettings: "" # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
          toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.

      - name: Publish Code Coverage
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "Cobertura.xml"
          badge: true
          fail_below_min: false # just informative for now
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 30"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Upload Test Result Files
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}/**/test_results/**/*
          retention-days: 5

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.16.1
        if: always()
        with:
          trx_files: "${{ github.workspace }}/**/*.trx"

      - name: Prepare artifact
        working-directory: ${{ inputs.working_directory }}
        run: |
          # Create an artifact directory and new copy of the folder
          mkdir -p artifact
          mkdir -p artifact/${{ inputs.publish_directory_name }}
          
          # Remove brackets and split the string into an array
          IFS=', ' read -r -a files <<< "$(echo "${{ inputs.setup_files }}" | tr -d '[]"')"

          # Iterate through the array and copy each file
          for file in "${files[@]}"; do
            if [[ -f "$file" ]]; then
              cp "$file" "artifact/"
              echo "Copied '$file' to 'artifact/'"
            else
              echo "File '$file' not found."
            fi
          done

      - name: Publish dotnet
        working-directory: ${{ inputs.working_directory }}
        run: |
          dotnet publish ${{ inputs.publish_project_path }} \
            --no-build \
            --no-restore \
            --output 'artifact/${{ inputs.publish_directory_name }}' \
            --configuration Release

      - name: List artifact
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "Files copied to artifact directory including distribution and setup files"
          echo "------------------------------------------------------------------"
          cd artifact
          ls -R

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.working_directory }}/artifact
          include-hidden-files: true
          if-no-files-found: error