name: Golang Api Build

description: |
    This workflow builds dotnet api applications. It installs dependencies, runs tests, builds the application and uploads the build artifact.
    This workflow is designed to be reusable and can be called from other workflows.
on:
  workflow_call:
    inputs:
        go_version:
            description: "The version of Go to use"
            required: true
            type: string
            default: "1.24.2"

        go_mod_directory:
            description: "The sub directory of the source code to build"
            required: true
            type: string

        go_main_directory:
            description: "The sub directory of the source code where the main module is located"
            required: true
            type: string

        go_output_directory:
            description: "The sub directory of the source code where the output is located"
            required: true
            type: string

        go_executable_name:
            description: "The name of the executable to build"
            required: true
            type: string

        setup_files:
            required: false
            type: string

        artifact_name:
            description: "The name of the artifact to upload"
            required: true
            type: string
            default: "dotnet-build-artifact"

  workflow_dispatch:


jobs:
  build:
    name: Build and test app
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
            go-version: ${{ inputs.go_version }}
            cache-dependency-path: ${{ inputs.go_mod_directory }}/go.sum

      - name: Install linter
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Install Formatter
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Go version
        run: go version

      - name: Install dependencies
        run: go mod download
        working-directory: ${{ inputs.go_mod_directory }}

      - name: Format Check
        run: cd ${{ inputs.go_mod_directory }} && gofmt -s -l .

      - name: Lint
        run: cd ${{ inputs.go_mod_directory }} && golangci-lint run

      - name: Test
        run: cd ${{ inputs.go_mod_directory }} && go test -v ./...

      - name: Create build distribution directory
        run: mkdir -p dist

      - name: Clean distribution directory
        run: rm -r dist

      - name: Create output directory
        run: mkdir -p dist/${{ inputs.go_output_directory }}

      - name: Prepare output files
        run: |
          # Remove brackets and split the string into an array
          IFS=', ' read -r -a files <<< "$(echo "${{ inputs.setup_files }}" | tr -d '[]"')"

          # Iterate through the array and copy each file
          for file in "${files[@]}"; do
            if [[ -f "$file" ]]; then
              cp "$file" "dist/"
              echo "Copied '$file' to 'dist/'"
            else
              echo "File '$file' not found."
            fi
          done

      - name: Build app
        run: dist_dir=$(realpath ./dist) && echo "$dist_dir" && cd ${{ inputs.go_mod_directory }} && CGO_ENABLED=0 GOOS=linux go build -o "$dist_dir/${{ inputs.go_output_directory }}/${{ inputs.go_executable_name }}" ./${{ inputs.go_main_directory }}

      - name: List distribution directory
        run: |
            echo "Files copied to artifact directory including distribution and setup files"
            echo "------------------------------------------------------------------"
            cd dist
            ls -R

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: dist
          include-hidden-files: true
          if-no-files-found: error
