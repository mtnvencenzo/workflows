name: UI Build
# description: |
#     This workflow builds the UI application. It installs dependencies, runs linting, tests, builds the application and uploads the build artifact.
#     This workflow is designed to be reusable and can be called from other workflows.
on:
  workflow_call:
    inputs:
      working_directory:
        description: ""
        required: true
        type: string
      node_version:
        description: "The node version to use"
        required: false
        default: "23.5.x"
        type: string
      setup_files:
        required: false
        type: string
      artifact_name:
        description: "The name of the artifact to upload"
        required: false
        type: string
        default: "ui-build-artifact"
      upload_artifact:
        description: "Whether to upload the artifact or not"
        required: true
        type: boolean
      use_npm_auth:
        description: "Whether to authenticate to an npm feed or not"
        required: false
        default: true
        type: boolean
      version:
        description: "The version of the application"
        required: false
        type: string
        default: "1.0.0"
      version_file_path:
        description: "The path to the version file"
        required: false
        type: string
      version_tag:
        description: "The version tag to use"
        required: false
        type: string

    secrets:
      github_packages_pat_token:
        description: "The pat token used to access github packages"
        required: false

  workflow_dispatch:

jobs:
  build:
    name: Build and test app
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: '${{ inputs.node_version }}'

      - name: Install yarn
        run: npm install -g yarn

      - name: Authenticate npm feed
        if: ${{ inputs.use_npm_auth }}
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "@mtnvencenzo:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.github_packages_pat_token }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Install
        working-directory: ${{ inputs.working_directory }}
        run: yarn install --frozen-lockfile

      - name: Lint
        working-directory: ${{ inputs.working_directory }}
        run: yarn lint

      - name: Update version file
        if: ${{ inputs.version_file_path != '' && inputs.version != '' }}
        working-directory: ${{ inputs.working_directory }}
        env:
          VERSION: ${{ inputs.version }}
          VERSION_TAG: ${{ inputs.version_tag }}
          VERSION_FILE_PATH: ${{ inputs.version_file_path }}
        run: |
          set -euo pipefail

          full_version="$VERSION"
          if [[ -n "$VERSION_TAG" ]]; then
            full_version="${full_version}+${VERSION_TAG}"
          fi

          printf '{\n    "version": "%s"\n}\n' "$full_version" > "$VERSION_FILE_PATH"

      - name: Test and coverage
        working-directory: ${{ inputs.working_directory }}
        run: yarn coverage

      - name: Build
        working-directory: ${{ inputs.working_directory }}
        run: yarn build:prod

      - name: Prepare artifact
        working-directory: ${{ inputs.working_directory }}
        run: |
          # Create an artifact directory and new copy of the dist folder
          mkdir -p artifact
          cp -r dist artifact/
          
          # Remove brackets and split the string into an array
          IFS=', ' read -r -a files <<< "$(echo "${{ inputs.setup_files }}" | tr -d '[]"')"

          # Iterate through the array and copy each file
          for file in "${files[@]}"; do
            if [[ -f "$file" ]]; then
              cp "$file" "artifact/"
              echo "Copied '$file' to 'artifact/'"
            else
              echo "File '$file' not found."
            fi
          done

          echo "Files copied to artifact directory including distribution and setup files"
          echo "------------------------------------------------------------------"
          cd artifact
          ls -R


      - name: Upload artifact
        if: ${{ inputs.upload_artifact == true }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.working_directory }}/artifact
          include-hidden-files: true
          if-no-files-found: error